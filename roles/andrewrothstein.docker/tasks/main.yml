---
- name: resolve platform specific vars
  include_vars: "{{item}}"
  with_first_found:
    - "{{ansible_distribution}}-{{ansible_distribution_release}}.yml"
    - "{{ansible_distribution}}.yml"
    - "{{ansible_os_family}}.yml"

- name: install utils for fiddling with ethernet bridges...
  become: yes
  become_user: root
  with_items:
    - bridge-utils
  package: name={{item}} state=present

- stat: path=/usr/bin/docker
  become: yes
  become_user: root
  register: dockerBinary

- name: install....
  when: dockerBinary.stat.exists == False
  become: yes
  become_user: root
  include: RunInstaller.yml

- name: loading systemd variables...
  become: yes
  become_user: root
  when: >-
    ansible_distribution != "Ubuntu"
    or (ansible_distribution == "Ubuntu" and ansible_distribution_major_version|int >= 16)
  include_vars: systemd-vars.yml

- name: loading upstart variables...
  become: yes
  become_user: root
  when: ansible_distribution == "Ubuntu" and ansible_distribution_major_version|int < 16
  include_vars: upstart-vars.yml
    
- name : creating init-system config directory...
  become: yes
  become_user: root
  with_items: '{{docker_config_files}}'
  file: >
    group={{docker_group}}
    path=/{{item.d}}
    state=directory
    mode=0755
    
- name: configuring init-system...
  become: yes
  become_user: root
  with_items: '{{docker_config_files}}'
  register: docker_config_written
  template: >-
    src={{item.d}}/{{item.f}}.j2
    dest=/{{item.d}}/{{item.f}}
    mode={{item.m}}

- name: create root user docker config directory
  become: yes
  become_user: root
  file: >-
    path=/root/.docker
    state=directory
    mode=0700
    
- name: configuring docker access for the root user...
  become: yes
  become_user: root
  when: docker_remote and docker_tls
  with_items:
    - {f: '{{docker_pki_cert_src}}', t: cert.pem, m: '0600'}
    - {f: '{{docker_pki_ca_cert_src}}', t: ca.pem, m: '0600'}
    - {f: '{{docker_pki_key_src}}', t: key.pem, m: '0400'}
  copy: >-
    src={{item.f}}
    dest=/root/.docker/{{item.t}}
    mode={{item.m}}

- name: write /etc/profile.d/docker.sh
  become: yes
  become_user: root
  with_items:
    - etc/profile.d/docker.sh
  template: >-
    src={{item}}.j2
    dest=/{{item}}
    mode=0644
    
- name: init-system reload 
  when: docker_config_written|changed and docker_init == 'systemd'
  become: yes
  become_user: root
  command: systemctl daemon-reload

- name : launch docker...
  become: yes
  become_user: root
  service: name=docker state=started enabled=yes

